# Intro
Inizialmente ho pensato di risolvere il tutto generando ogni possibile
combinazione di colori e stabilire cosi quali fossero le righe da abbinare.

Ad esempio se consideriamo i seguinti input

```
colors = [0, 255]
D = 2
```

Le righe da abbinare sarebbero queste

```
[[0, 0],[0, 255],[255, 0],[255, 255]]
```

Sfortunatamente questo metodo, ha portato, malgrado le ottimizzazioni usate,
al passare tutti i test eccetto uno. E' risultato purtroppo difficile applicare
una buona strategia di filtri alle righe. Al salire delle dimensione di colors
e di D l'algoritmo non scalava bene.

Ho iniziato nuovamente da capo utilizzando il metodo pixel a pixel, al posto
di un'intera riga da aggiungere alla matrice, sono passato ad un pixel alla
volta. I filtri si sono rilevati più semplici da implementare ed a differenza
del precedente metodo non richiedevano cicli, solo una serie di if.

Successivamente al peer review ho potuto cambiare approccio grazie ad uno degli
algoritmi ricevuti nel peer.

Se inizialmente la strategia era filtrare ogni colore all'interno del ciclo for
ed evitare di andare in ricorsione se il colore non era compatibile con il
patter scelto, adesso con il nuovo approccio, propago lungo le chiamate
ricorsive solamente i colori che sono compatibili con il patter. Questo cambio
ha portato a una riduzione delle chiamate ricorsive, mantenendo la complessità
inalterata e quindi garantendo maggiore velocità.

Il codice lo ho strutturato nel seguente modo, diviso in più funzioni.

Allo stato attuale non ho utilizzato un albero di gioco, solo semplice
ricorsione.

# Algoritmo


## funzione filter_diff()
    - ricevo in ingresso
        - colori
        - matrice
        - posizione in cui dovrà essere inserito il nuovo pixel

    - escludo dal set tutti i pixel attorno e lo restituisco


## funzione filter_cross()
    - ricevo in ingresso
        - colori
        - matrice
        - posizione in cui dovrà essere inserito il nuovo pixel

    - se x è maggiore di zero, escludo dal set il pixel precedente e lo 
      restituisco
    - restituisco come set il colore che risulta uguale rispetto alla diagonale


## funzione filter_hrect()
    - ricevo in ingresso
        - colori
        - matrice
        - posizione in cui dovrà essere inserito il nuovo pixel

    - se x è maggiore di zero, restituisco il colore precedente
    - se y è maggiore di zero, restituisco un set di colori che non contiene
      il colore presente in y-1


## funzione filter_vrect()
    - ricevo in ingresso
        - colori
        - matrice
        - posizione in cui dovrà essere inserito il nuovo pixel

    - se x è maggiore di zero, restituisco il set senza il colore precedente
    - se y è maggiore di zero, restituisco il colore presente in y-1


## funzione gen_matrix_pattern()
    - ricevo in ingresso
        - un set di colori
        - un altro set di colori
        - le posizioni della matrice
        - una matrice vuota
        - la dimensione della matrice
        - una lista per contenere le matrici generate
        - un valore intero ad indicare il livello di ricorsione raggiunto
        - una funzione da utilizzare come filtro per il pattern

    - estraggo la posizione corrente dalla lista delle posizioni della matrice
    - controllo quali colori sono compatibili con il pattern scelto in base
      allo stato attuale della matrice
    - pero ogni colore che ha passato il controllo
        - assegno alla matrice il colore corrente alla posizione ricavata in
          precedenza
        - se il livello di ricorsione è uguale alla dimensione della matrice
            - appendo la matrice alla lista di matrici
        - altrimenti
            - vado in ricorsione aumetando il valore del livello e passando
              la matrice con il pixel aggiunto


## funzione gen_matrix()
    - ricevo in ingresso
        - i colori
        - le posizioni della matrice
        - una matrice vuota
        - la dimensione della matrice
        - una lista per contenere le matrici generate
        - un valore intero ad indicare il livello di ricorsione raggiunto

    - estraggo la posizione corrente dalla lista delle posizioni della matrice
    - pero ogni colore
        - assegno alla matrice il colore corrente alla posizione ricavata in
          precedenza
        - se il livello di ricorsione è uguale alla dimensione della matrice
            - appendo la matrice alla lista di matrici
        - altrimenti
            - vado in ricorsione aumetando il valore del livello e passando
              la matrice con il pixel aggiunto


## funzione ex()
    - in base a D genero la lista di tutte le posizioni all'interno della
      matrice
    - creo un dizionario contenente come chiavi le stringhe dei quattro
      pattern e per ogni chiave la funzione che filtra per quello specifico
      pattern
    - se img_properties ha un valore chiamo la funzione gen_matrix_pattern
      altrimenti la funzione gen_matrix
